# Disable triggers
trigger:
- master
- develop
pr:
- master
- develop

stages:
- stage: A
  displayName: 'C# Library'
  jobs:
  - job: A1
    displayName: 'Build'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
      displayName: 'Build'
    - script: |
        echo "Publish"
      displayName: 'Publish'

- stage: B
  displayName: 'C Library'
  # dependsOn: A
  jobs:
  - job: B1
    displayName: 'Linux Build'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: | 
        sudo mv /usr/local/bin/cmake /usr/local/bin/cmake-old
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 8611B7A28669BB93
        sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ xenial main'
        sudo apt-get update && sudo apt-get install -y cmake
        cmake --version
      displayName: 'Upgrade cmake'
    - task: CMake@1
      displayName: 'Config'
      inputs:
        workingDirectory: '$(EG-ENCRYPTION-SRC-PATH)'
        cmakeArgs: '-S . -B build -DBUILD_SHARED_LIBS=ON'
    - task: CMake@1
      displayName: 'Build'
      inputs:
        workingDirectory: '$(EG-ENCRYPTION-SRC-PATH)'
        cmakeArgs: '--build build'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish'
      enabled: false
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'libelectionguard.so'
        publishLocation: 'Container'
    - task: DotNetCoreCLI@2
      displayName: 'Test'
      enabled: false
      inputs:
        command: 'test'
        projects: 'src/UnitTests'
        testRunTitle: 'Unit Test'
  - job: B2
    displayName: 'Windows Build'
    pool:
      vmImage: 'windows-latest'
    steps:
    # Disable Windows Build
    - task: CMake@1
      enabled: false
      displayName: 'Config'
      inputs:
        workingDirectory: '$(EG-ENCRYPTION-SRC-PATH)'
        cmakeArgs: '-S . -B build -DBUILD_SHARED_LIBS=ON'
    - task: CMake@1
      enabled: false
      displayName: 'Build'
      inputs:
        workingDirectory: '$(EG-ENCRYPTION-SRC-PATH)'
        cmakeArgs: '--build build'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish'
      enabled: false
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'electionguard.dll'
        publishLocation: 'Container'
    - task: DotNetCoreCLI@2
      displayName: 'Test'
      enabled: false
      inputs:
        command: 'test'
        projects: 'src/UnitTests'
        testRunTitle: 'Unit Test'
  - job: B3
    displayName: 'MacOS Build'
    pool:
      vmImage: 'macOS-latest'
    steps:
    - script: |
        brew install gmp
      displayName: 'Install gmp'
    - task: CMake@1
      displayName: 'Config'
      inputs:
        workingDirectory: '$(EG-ENCRYPTION-SRC-PATH)'
        cmakeArgs: '-S . -B build -DBUILD_SHARED_LIBS=ON'
    - task: CMake@1
      displayName: 'Build'
      inputs:
        workingDirectory: '$(EG-ENCRYPTION-SRC-PATH)'
        cmakeArgs: '--build build'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish'
      enabled: false
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'libelectionguard.dylib'
        publishLocation: 'Container'
    - task: DotNetCoreCLI@2
      displayName: 'Test'
      enabled: false
      inputs:
        command: 'test'
        projects: 'src/UnitTests'
        testRunTitle: 'Unit Test'

- stage: C
  displayName: 'Package and Publish'
  dependsOn: B
  jobs:
  - job: C1
    displayName: 'Nuget'
    steps:
    - task: AzureKeyVault@1
      displayName: 'Get Keys'
      enabled: false
      inputs:
        azureSubscription: ''
        KeyVaultName: ''
        SecretsFilter: 'EditableOptions'
    - script: |
        echo "Package"
      displayName: 'Package'
    - script: |
        echo "Publish to Nuget"
      displayName: 'Publish to Nuget'
    - script: |
        echo "Publish to Github Package Registry"
      displayName: 'Publish to Github Package Registry'
